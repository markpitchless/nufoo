#include <ros/ros.h>
[% IF dynamic_reconfigure %]
#include <dynamic_reconfigure/server.h>
#include "[% package %]/[% class_name %]Config.h"
[% END %]

namespace [% package %] {

class [% class_name %] {

public:
    /**
     * Construct a new [% class_name %], setting up it's publishers,
     * subscribers, etc.
     */
    [% class_name %]()
      : nh_("~")
      [%- FOR param IN params %]
      , [% param.name %]([% param.default %])
      [%- END %]
    {
        // Setup ROS topics and services
        [%- FOREACH pub IN publishers %]
        [% pub.var_name %]_pub_ = nh_.advertise<[% pub.cpp_class %]>("[% pub.topic %]", 1);

        [%- END %]
        [%- FOREACH sub IN subscribers %]
        [% sub.var_name %]_sub_ = nh_.subscribe("[% sub.topic %]", 1, &[% class_name %]::[% sub.var_name %]_cb_, this);

        [%- END %]
    }

    [%- IF dynamic_reconfigure %]
    /**
     * Handles incoming dynamic reconfigure requests, updtaing the classes
     * members from the config.
     */
    void config_cb_([% package %]::[% class_name %]Config &config, uint32_t level)
    {
      [%- FOR param IN params %]
        [% param.name %] = config.[% param.name %];
      [%- END %]
    }
    [%- END %]

    /**
     * Set the node spinning. ros::init should have already been called.
     */
    void spin()
    {
        ros::spin();
        //while (ros::ok())
        //{
        //}
    }

protected:
    ros::NodeHandle nh_;
    [%- FOR param IN params %]
    [% param.data_type %] [% param.name %];
    [%- END %]
    [%- IF dynamic_reconfigure %]

    dynamic_reconfigure::Server<[% package %]::[% class_name %]Config> config_server_
    [%- END %]

    [%- FOREACH pub IN publishers %]
    ros::Publisher [% pub.var_name %]_pub_;
    [%- END %]
    [%- FOREACH sub IN subscribers %]
    ros::Subscriber [% sub.var_name %]_sub_;
    [%- END %]

    [%- FOREACH sub IN subscribers %]
    /**
     * Handles incoming [% sub.msg_type %] on topic [% sub.topic %]
     */
    void [% class_name %]::[% sub.var_name %]_cb_ (const [% sub.cpp_class %]::ConstPtr& msg)
    {
        // @todo - do stuff with msg;
    }

    [%- END %]
};

} //[% package %]

int
main (int argc, char** argv)
{
  ros::init (argc, argv, "[% name %]");
  [% package %]::[% class_name %] node;
  node.spin();
  return 0;
}
