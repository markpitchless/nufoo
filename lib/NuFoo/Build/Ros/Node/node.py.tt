#!/usr/bin/env python

# ####################################################################
# Copyright (c) 2013 Shadow Robot Company Ltd.
# All rights reserved.
# This code is proprietary and may not be used, copied, distributed without
# prior authorisation and agreement from Shadow Robot Company Ltd. *
# ####################################################################

import rospy;
[% IF dynamic_reconfigure %]
from dynamic_reconfigure.server import Server
from [% package %].cfg import [% class_name %]Config
[% END %]
from std_msgs.msg import *

class [% class_name %](object):
    """
    A ros node to...
    """

    def __init__(self, ):
        """
        @brief Construct a new [% class_name %], setting up it's publishers,
        subscribers, etc.
        """
        [%- FOR param IN params %]
        self._[% param.name %] = [% param.default ? '"' _ param.default _ '"' : "None" %]
        [%- END %]

        [%- IF dynamic_reconfigure %]
        self._config_server = Server([% class_name %]Config, self._config_cb)
        [%- END %]

        [%- FOREACH pub IN publishers %]
        self._[% pub.var_name %]_pub = rospy.Publisher("[% pub.topic %]", [% pub.py_type %])

        [%- END %]
        [%- FOREACH sub IN subscribers %]
        self._[% sub.var_name %]_sub = rospy.Subscriber("[% sub.topic %]", [% sub.py_type %], self._[% sub.var_name %]_cb, queue_size=1)

        [%- END %]

    def spin(self):
        """
        @brief Sets the node spinning. rospy.init should have been called first.
        """
        rospy.spin();
        #while not rospy.is_shutdown():
        #    str = "hello world %s" % rospy.get_time()
        #    rospy.loginfo(str)
        #    rospy.sleep(1.0)

    [%- IF dynamic_reconfigure %]
    def _config_cb(self, config, level):
        """
        @brief Handles incoming dynamic reconfigure requests, updating the objects
        attributes with the new config.
        @param config Config object, a [% class_name %]Config
        """
        [%- FOR param IN params %]
        self._[% param.name %] = config.[% param.name %]
        [%- END %]
        return config
    [%- END %]
        
    [%-# Create callbacks for the subscribers setup in __init__ %]
    [%- FOREACH sub IN subscribers %]
    def _[% sub.var_name %]_cb(self, msg):
        """
        @brief Handles incoming topic [% sub.topic %]
        @param msg The [% sub.msg_type %] message.
        """
        # @todo - do someting with msg
        pass

    [%- END %]


if __name__ == "__main__":
    try:
        rospy.init_node("[% name %]")
        node = [% class_name %]()
        node.spin()
    except rospy.ROSInterruptException:
        pass

